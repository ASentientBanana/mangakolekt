// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int imaxabs(
    int __n,
  ) {
    return _imaxabs(
      __n,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<__gwchar_t> __nptr,
    ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<__gwchar_t>,
              ffi.Pointer<ffi.Pointer<__gwchar_t>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(ffi.Pointer<__gwchar_t>,
          ffi.Pointer<ffi.Pointer<__gwchar_t>>, int)>();

  int wcstoumax(
    ffi.Pointer<__gwchar_t> __nptr,
    ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<__gwchar_t>,
              ffi.Pointer<ffi.Pointer<__gwchar_t>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(ffi.Pointer<__gwchar_t>,
          ffi.Pointer<ffi.Pointer<__gwchar_t>>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fopencookie(
    ffi.Pointer<ffi.Void> __magic_cookie,
    ffi.Pointer<ffi.Char> __modes,
    cookie_io_functions_t __io_funcs,
  ) {
    return _fopencookie(
      __magic_cookie,
      __modes,
      __io_funcs,
    );
  }

  late final _fopencookiePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, cookie_io_functions_t)>>('fopencookie');
  late final _fopencookie = _fopencookiePtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          cookie_io_functions_t)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
    ffi.Pointer<ffi.Char> __f,
    int __arg,
  ) {
    return _vasprintf(
      __ptr,
      __f,
      __arg,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>, int)>();

  int __asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return ___asprintf(
      __ptr,
      __fmt,
    );
  }

  late final ___asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('__asprintf');
  late final ___asprintf = ___asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _asprintf(
      __ptr,
      __fmt,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf =
      _vdprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(
    ffi.Pointer<time_t> __timer,
  ) {
    return _time(
      __timer,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(
    int __time1,
    int __time0,
  ) {
    return _difftime(
      __time1,
      __time0,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    return _mktime(
      __tp,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  late final _strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>, locale_t)>>('strftime_l');
  late final _strftime_l = _strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>, locale_t)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _gmtime(
      __timer,
    );
  }

  late final _gmtimePtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>('gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _localtime(
      __timer,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    return _asctime(
      __tp,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _ctime(
      __timer,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int> ___daylight = _lookup<ffi.Int>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Long> ___timezone =
      _lookup<ffi.Long>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    return _timegm(
      __tp,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    return _timelocal(
      __tp,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int dysize(
    int __year,
  ) {
    return _dysize(
      __year,
    );
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  late final _clock_nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<timespec>,
              ffi.Pointer<timespec>)>>('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr.asFunction<
      int Function(int, int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<clockid_t> __clock_id,
  ) {
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  late final _clock_getcpuclockidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>(
      'clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  late final _timer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<sigevent>,
              ffi.Pointer<timer_t>)>>('timer_create');
  late final _timer_create = _timer_createPtr.asFunction<
      int Function(int, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>();

  int timer_delete(
    timer_t __timerid,
  ) {
    return _timer_delete(
      __timerid,
    );
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete =
      _timer_deletePtr.asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  late final _timer_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
              ffi.Pointer<itimerspec>)>>('timer_settime');
  late final _timer_settime = _timer_settimePtr.asFunction<
      int Function(
          timer_t, int, ffi.Pointer<itimerspec>, ffi.Pointer<itimerspec>)>();

  int timer_gettime(
    timer_t __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  late final _timer_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>>('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<itimerspec>)>();

  int timer_getoverrun(
    timer_t __timerid,
  ) {
    return _timer_getoverrun(
      __timerid,
    );
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
          'timer_getoverrun');
  late final _timer_getoverrun =
      _timer_getoverrunPtr.asFunction<int Function(timer_t)>();

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    return _timespec_get(
      __ts,
      __base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  void zip_register_progress_callback(
    ffi.Pointer<zip_t> arg0,
    zip_progress_callback_t arg1,
  ) {
    return _zip_register_progress_callback(
      arg0,
      arg1,
    );
  }

  late final _zip_register_progress_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<zip_t>,
              zip_progress_callback_t)>>('zip_register_progress_callback');
  late final _zip_register_progress_callback =
      _zip_register_progress_callbackPtr.asFunction<
          void Function(ffi.Pointer<zip_t>, zip_progress_callback_t)>();

  int zip_add(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<zip_source_t> arg2,
  ) {
    return _zip_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_addPtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<zip_source_t>)>>('zip_add');
  late final _zip_add = _zip_addPtr.asFunction<
      int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<zip_source_t>)>();

  int zip_add_dir(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _zip_add_dir(
      arg0,
      arg1,
    );
  }

  late final _zip_add_dirPtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(
              ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>)>>('zip_add_dir');
  late final _zip_add_dir = _zip_add_dirPtr
      .asFunction<int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> zip_get_file_comment(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    int arg3,
  ) {
    return _zip_get_file_comment(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_get_file_commentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<zip_t>, zip_uint64_t,
              ffi.Pointer<ffi.Int>, ffi.Int)>>('zip_get_file_comment');
  late final _zip_get_file_comment = _zip_get_file_commentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<zip_t>, int, ffi.Pointer<ffi.Int>, int)>();

  int zip_get_num_files(
    ffi.Pointer<zip_t> arg0,
  ) {
    return _zip_get_num_files(
      arg0,
    );
  }

  late final _zip_get_num_filesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_t>)>>(
          'zip_get_num_files');
  late final _zip_get_num_files =
      _zip_get_num_filesPtr.asFunction<int Function(ffi.Pointer<zip_t>)>();

  int zip_rename(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _zip_rename(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t,
              ffi.Pointer<ffi.Char>)>>('zip_rename');
  late final _zip_rename = _zip_renamePtr.asFunction<
      int Function(ffi.Pointer<zip_t>, int, ffi.Pointer<ffi.Char>)>();

  int zip_replace(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    ffi.Pointer<zip_source_t> arg2,
  ) {
    return _zip_replace(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t,
              ffi.Pointer<zip_source_t>)>>('zip_replace');
  late final _zip_replace = _zip_replacePtr.asFunction<
      int Function(ffi.Pointer<zip_t>, int, ffi.Pointer<zip_source_t>)>();

  int zip_set_file_comment(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _zip_set_file_comment(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_set_file_commentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('zip_set_file_comment');
  late final _zip_set_file_comment = _zip_set_file_commentPtr.asFunction<
      int Function(ffi.Pointer<zip_t>, int, ffi.Pointer<ffi.Char>, int)>();

  int zip_error_get_sys_type(
    int arg0,
  ) {
    return _zip_error_get_sys_type(
      arg0,
    );
  }

  late final _zip_error_get_sys_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'zip_error_get_sys_type');
  late final _zip_error_get_sys_type =
      _zip_error_get_sys_typePtr.asFunction<int Function(int)>();

  void zip_error_get(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _zip_error_get(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_error_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('zip_error_get');
  late final _zip_error_get = _zip_error_getPtr.asFunction<
      void Function(
          ffi.Pointer<zip_t>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int zip_error_to_str(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _zip_error_to_str(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_error_to_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, zip_uint64_t, ffi.Int,
              ffi.Int)>>('zip_error_to_str');
  late final _zip_error_to_str = _zip_error_to_strPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  void zip_file_error_get(
    ffi.Pointer<zip_file_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _zip_file_error_get(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_file_error_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<zip_file_t>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('zip_file_error_get');
  late final _zip_file_error_get = _zip_file_error_getPtr.asFunction<
      void Function(ffi.Pointer<zip_file_t>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<zip_source_t> zip_source_zip(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<zip_t> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _zip_source_zip(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _zip_source_zipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_t>,
              ffi.Pointer<zip_t>,
              zip_uint64_t,
              zip_flags_t,
              zip_uint64_t,
              zip_int64_t)>>('zip_source_zip');
  late final _zip_source_zip = _zip_source_zipPtr.asFunction<
      ffi.Pointer<zip_source_t> Function(
          ffi.Pointer<zip_t>, ffi.Pointer<zip_t>, int, int, int, int)>();

  ffi.Pointer<zip_source_t> zip_source_zip_create(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<zip_error_t> arg5,
  ) {
    return _zip_source_zip_create(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _zip_source_zip_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_t>,
              zip_uint64_t,
              zip_flags_t,
              zip_uint64_t,
              zip_int64_t,
              ffi.Pointer<zip_error_t>)>>('zip_source_zip_create');
  late final _zip_source_zip_create = _zip_source_zip_createPtr.asFunction<
      ffi.Pointer<zip_source_t> Function(
          ffi.Pointer<zip_t>, int, int, int, int, ffi.Pointer<zip_error_t>)>();

  int zip_close(
    ffi.Pointer<zip_t> arg0,
  ) {
    return _zip_close(
      arg0,
    );
  }

  late final _zip_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_t>)>>(
          'zip_close');
  late final _zip_close =
      _zip_closePtr.asFunction<int Function(ffi.Pointer<zip_t>)>();

  int zip_delete(
    ffi.Pointer<zip_t> arg0,
    int arg1,
  ) {
    return _zip_delete(
      arg0,
      arg1,
    );
  }

  late final _zip_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t)>>('zip_delete');
  late final _zip_delete =
      _zip_deletePtr.asFunction<int Function(ffi.Pointer<zip_t>, int)>();

  int zip_dir_add(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _zip_dir_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_dir_addPtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>,
              zip_flags_t)>>('zip_dir_add');
  late final _zip_dir_add = _zip_dir_addPtr.asFunction<
      int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>, int)>();

  void zip_discard(
    ffi.Pointer<zip_t> arg0,
  ) {
    return _zip_discard(
      arg0,
    );
  }

  late final _zip_discardPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<zip_t>)>>(
          'zip_discard');
  late final _zip_discard =
      _zip_discardPtr.asFunction<void Function(ffi.Pointer<zip_t>)>();

  ffi.Pointer<zip_error_t> zip_get_error(
    ffi.Pointer<zip_t> arg0,
  ) {
    return _zip_get_error(
      arg0,
    );
  }

  late final _zip_get_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_error_t> Function(
              ffi.Pointer<zip_t>)>>('zip_get_error');
  late final _zip_get_error = _zip_get_errorPtr
      .asFunction<ffi.Pointer<zip_error_t> Function(ffi.Pointer<zip_t>)>();

  void zip_error_clear(
    ffi.Pointer<zip_t> arg0,
  ) {
    return _zip_error_clear(
      arg0,
    );
  }

  late final _zip_error_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<zip_t>)>>(
          'zip_error_clear');
  late final _zip_error_clear =
      _zip_error_clearPtr.asFunction<void Function(ffi.Pointer<zip_t>)>();

  int zip_error_code_zip(
    ffi.Pointer<zip_error_t> arg0,
  ) {
    return _zip_error_code_zip(
      arg0,
    );
  }

  late final _zip_error_code_zipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_error_t>)>>(
          'zip_error_code_zip');
  late final _zip_error_code_zip = _zip_error_code_zipPtr
      .asFunction<int Function(ffi.Pointer<zip_error_t>)>();

  int zip_error_code_system(
    ffi.Pointer<zip_error_t> arg0,
  ) {
    return _zip_error_code_system(
      arg0,
    );
  }

  late final _zip_error_code_systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_error_t>)>>(
          'zip_error_code_system');
  late final _zip_error_code_system = _zip_error_code_systemPtr
      .asFunction<int Function(ffi.Pointer<zip_error_t>)>();

  void zip_error_fini(
    ffi.Pointer<zip_error_t> arg0,
  ) {
    return _zip_error_fini(
      arg0,
    );
  }

  late final _zip_error_finiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<zip_error_t>)>>(
          'zip_error_fini');
  late final _zip_error_fini =
      _zip_error_finiPtr.asFunction<void Function(ffi.Pointer<zip_error_t>)>();

  void zip_error_init(
    ffi.Pointer<zip_error_t> arg0,
  ) {
    return _zip_error_init(
      arg0,
    );
  }

  late final _zip_error_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<zip_error_t>)>>(
          'zip_error_init');
  late final _zip_error_init =
      _zip_error_initPtr.asFunction<void Function(ffi.Pointer<zip_error_t>)>();

  void zip_error_init_with_code(
    ffi.Pointer<zip_error_t> arg0,
    int arg1,
  ) {
    return _zip_error_init_with_code(
      arg0,
      arg1,
    );
  }

  late final _zip_error_init_with_codePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<zip_error_t>, ffi.Int)>>('zip_error_init_with_code');
  late final _zip_error_init_with_code = _zip_error_init_with_codePtr
      .asFunction<void Function(ffi.Pointer<zip_error_t>, int)>();

  void zip_error_set(
    ffi.Pointer<zip_error_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _zip_error_set(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_error_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<zip_error_t>, ffi.Int, ffi.Int)>>('zip_error_set');
  late final _zip_error_set = _zip_error_setPtr
      .asFunction<void Function(ffi.Pointer<zip_error_t>, int, int)>();

  void zip_error_set_from_source(
    ffi.Pointer<zip_error_t> arg0,
    ffi.Pointer<zip_source_t> arg1,
  ) {
    return _zip_error_set_from_source(
      arg0,
      arg1,
    );
  }

  late final _zip_error_set_from_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<zip_error_t>,
              ffi.Pointer<zip_source_t>)>>('zip_error_set_from_source');
  late final _zip_error_set_from_source =
      _zip_error_set_from_sourcePtr.asFunction<
          void Function(ffi.Pointer<zip_error_t>, ffi.Pointer<zip_source_t>)>();

  ffi.Pointer<ffi.Char> zip_error_strerror(
    ffi.Pointer<zip_error_t> arg0,
  ) {
    return _zip_error_strerror(
      arg0,
    );
  }

  late final _zip_error_strerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<zip_error_t>)>>('zip_error_strerror');
  late final _zip_error_strerror = _zip_error_strerrorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<zip_error_t>)>();

  int zip_error_system_type(
    ffi.Pointer<zip_error_t> arg0,
  ) {
    return _zip_error_system_type(
      arg0,
    );
  }

  late final _zip_error_system_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_error_t>)>>(
          'zip_error_system_type');
  late final _zip_error_system_type = _zip_error_system_typePtr
      .asFunction<int Function(ffi.Pointer<zip_error_t>)>();

  int zip_error_to_data(
    ffi.Pointer<zip_error_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _zip_error_to_data(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_error_to_dataPtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(ffi.Pointer<zip_error_t>, ffi.Pointer<ffi.Void>,
              zip_uint64_t)>>('zip_error_to_data');
  late final _zip_error_to_data = _zip_error_to_dataPtr.asFunction<
      int Function(ffi.Pointer<zip_error_t>, ffi.Pointer<ffi.Void>, int)>();

  int zip_fclose(
    ffi.Pointer<zip_file_t> arg0,
  ) {
    return _zip_fclose(
      arg0,
    );
  }

  late final _zip_fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_file_t>)>>(
          'zip_fclose');
  late final _zip_fclose =
      _zip_fclosePtr.asFunction<int Function(ffi.Pointer<zip_file_t>)>();

  ffi.Pointer<zip_t> zip_fdopen(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _zip_fdopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_t> Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('zip_fdopen');
  late final _zip_fdopen = _zip_fdopenPtr.asFunction<
      ffi.Pointer<zip_t> Function(int, int, ffi.Pointer<ffi.Int>)>();

  int zip_file_add(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<zip_source_t> arg2,
    int arg3,
  ) {
    return _zip_file_add(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_file_addPtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<zip_source_t>, zip_flags_t)>>('zip_file_add');
  late final _zip_file_add = _zip_file_addPtr.asFunction<
      int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<zip_source_t>, int)>();

  void zip_file_attributes_init(
    ffi.Pointer<zip_file_attributes_t> arg0,
  ) {
    return _zip_file_attributes_init(
      arg0,
    );
  }

  late final _zip_file_attributes_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<zip_file_attributes_t>)>>('zip_file_attributes_init');
  late final _zip_file_attributes_init = _zip_file_attributes_initPtr
      .asFunction<void Function(ffi.Pointer<zip_file_attributes_t>)>();

  void zip_file_error_clear(
    ffi.Pointer<zip_file_t> arg0,
  ) {
    return _zip_file_error_clear(
      arg0,
    );
  }

  late final _zip_file_error_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<zip_file_t>)>>(
          'zip_file_error_clear');
  late final _zip_file_error_clear = _zip_file_error_clearPtr
      .asFunction<void Function(ffi.Pointer<zip_file_t>)>();

  int zip_file_extra_field_delete(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _zip_file_extra_field_delete(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_file_extra_field_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t, zip_uint16_t,
              zip_flags_t)>>('zip_file_extra_field_delete');
  late final _zip_file_extra_field_delete = _zip_file_extra_field_deletePtr
      .asFunction<int Function(ffi.Pointer<zip_t>, int, int, int)>();

  int zip_file_extra_field_delete_by_id(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _zip_file_extra_field_delete_by_id(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _zip_file_extra_field_delete_by_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t, zip_uint16_t,
              zip_uint16_t, zip_flags_t)>>('zip_file_extra_field_delete_by_id');
  late final _zip_file_extra_field_delete_by_id =
      _zip_file_extra_field_delete_by_idPtr
          .asFunction<int Function(ffi.Pointer<zip_t>, int, int, int, int)>();

  int zip_file_extra_field_set(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<zip_uint8_t> arg4,
    int arg5,
    int arg6,
  ) {
    return _zip_file_extra_field_set(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _zip_file_extra_field_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zip_t>,
              zip_uint64_t,
              zip_uint16_t,
              zip_uint16_t,
              ffi.Pointer<zip_uint8_t>,
              zip_uint16_t,
              zip_flags_t)>>('zip_file_extra_field_set');
  late final _zip_file_extra_field_set =
      _zip_file_extra_field_setPtr.asFunction<
          int Function(ffi.Pointer<zip_t>, int, int, int,
              ffi.Pointer<zip_uint8_t>, int, int)>();

  int zip_file_extra_fields_count(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _zip_file_extra_fields_count(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_file_extra_fields_countPtr = _lookup<
      ffi.NativeFunction<
          zip_int16_t Function(ffi.Pointer<zip_t>, zip_uint64_t,
              zip_flags_t)>>('zip_file_extra_fields_count');
  late final _zip_file_extra_fields_count = _zip_file_extra_fields_countPtr
      .asFunction<int Function(ffi.Pointer<zip_t>, int, int)>();

  int zip_file_extra_fields_count_by_id(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _zip_file_extra_fields_count_by_id(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_file_extra_fields_count_by_idPtr = _lookup<
      ffi.NativeFunction<
          zip_int16_t Function(ffi.Pointer<zip_t>, zip_uint64_t, zip_uint16_t,
              zip_flags_t)>>('zip_file_extra_fields_count_by_id');
  late final _zip_file_extra_fields_count_by_id =
      _zip_file_extra_fields_count_by_idPtr
          .asFunction<int Function(ffi.Pointer<zip_t>, int, int, int)>();

  ffi.Pointer<zip_uint8_t> zip_file_extra_field_get(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<zip_uint16_t> arg3,
    ffi.Pointer<zip_uint16_t> arg4,
    int arg5,
  ) {
    return _zip_file_extra_field_get(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _zip_file_extra_field_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_uint8_t> Function(
              ffi.Pointer<zip_t>,
              zip_uint64_t,
              zip_uint16_t,
              ffi.Pointer<zip_uint16_t>,
              ffi.Pointer<zip_uint16_t>,
              zip_flags_t)>>('zip_file_extra_field_get');
  late final _zip_file_extra_field_get =
      _zip_file_extra_field_getPtr.asFunction<
          ffi.Pointer<zip_uint8_t> Function(ffi.Pointer<zip_t>, int, int,
              ffi.Pointer<zip_uint16_t>, ffi.Pointer<zip_uint16_t>, int)>();

  ffi.Pointer<zip_uint8_t> zip_file_extra_field_get_by_id(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<zip_uint16_t> arg4,
    int arg5,
  ) {
    return _zip_file_extra_field_get_by_id(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _zip_file_extra_field_get_by_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_uint8_t> Function(
              ffi.Pointer<zip_t>,
              zip_uint64_t,
              zip_uint16_t,
              zip_uint16_t,
              ffi.Pointer<zip_uint16_t>,
              zip_flags_t)>>('zip_file_extra_field_get_by_id');
  late final _zip_file_extra_field_get_by_id =
      _zip_file_extra_field_get_by_idPtr.asFunction<
          ffi.Pointer<zip_uint8_t> Function(ffi.Pointer<zip_t>, int, int, int,
              ffi.Pointer<zip_uint16_t>, int)>();

  ffi.Pointer<ffi.Char> zip_file_get_comment(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    ffi.Pointer<zip_uint32_t> arg2,
    int arg3,
  ) {
    return _zip_file_get_comment(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_file_get_commentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<zip_t>, zip_uint64_t,
              ffi.Pointer<zip_uint32_t>, zip_flags_t)>>('zip_file_get_comment');
  late final _zip_file_get_comment = _zip_file_get_commentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<zip_t>, int, ffi.Pointer<zip_uint32_t>, int)>();

  ffi.Pointer<zip_error_t> zip_file_get_error(
    ffi.Pointer<zip_file_t> arg0,
  ) {
    return _zip_file_get_error(
      arg0,
    );
  }

  late final _zip_file_get_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_error_t> Function(
              ffi.Pointer<zip_file_t>)>>('zip_file_get_error');
  late final _zip_file_get_error = _zip_file_get_errorPtr
      .asFunction<ffi.Pointer<zip_error_t> Function(ffi.Pointer<zip_file_t>)>();

  int zip_file_get_external_attributes(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<zip_uint8_t> arg3,
    ffi.Pointer<zip_uint32_t> arg4,
  ) {
    return _zip_file_get_external_attributes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _zip_file_get_external_attributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zip_t>,
              zip_uint64_t,
              zip_flags_t,
              ffi.Pointer<zip_uint8_t>,
              ffi.Pointer<zip_uint32_t>)>>('zip_file_get_external_attributes');
  late final _zip_file_get_external_attributes =
      _zip_file_get_external_attributesPtr.asFunction<
          int Function(ffi.Pointer<zip_t>, int, int, ffi.Pointer<zip_uint8_t>,
              ffi.Pointer<zip_uint32_t>)>();

  int zip_file_is_seekable(
    ffi.Pointer<zip_file_t> arg0,
  ) {
    return _zip_file_is_seekable(
      arg0,
    );
  }

  late final _zip_file_is_seekablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_file_t>)>>(
          'zip_file_is_seekable');
  late final _zip_file_is_seekable = _zip_file_is_seekablePtr
      .asFunction<int Function(ffi.Pointer<zip_file_t>)>();

  int zip_file_rename(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _zip_file_rename(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_file_renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t,
              ffi.Pointer<ffi.Char>, zip_flags_t)>>('zip_file_rename');
  late final _zip_file_rename = _zip_file_renamePtr.asFunction<
      int Function(ffi.Pointer<zip_t>, int, ffi.Pointer<ffi.Char>, int)>();

  int zip_file_replace(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    ffi.Pointer<zip_source_t> arg2,
    int arg3,
  ) {
    return _zip_file_replace(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_file_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t,
              ffi.Pointer<zip_source_t>, zip_flags_t)>>('zip_file_replace');
  late final _zip_file_replace = _zip_file_replacePtr.asFunction<
      int Function(ffi.Pointer<zip_t>, int, ffi.Pointer<zip_source_t>, int)>();

  int zip_file_set_comment(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    int arg4,
  ) {
    return _zip_file_set_comment(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _zip_file_set_commentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zip_t>,
              zip_uint64_t,
              ffi.Pointer<ffi.Char>,
              zip_uint16_t,
              zip_flags_t)>>('zip_file_set_comment');
  late final _zip_file_set_comment = _zip_file_set_commentPtr.asFunction<
      int Function(ffi.Pointer<zip_t>, int, ffi.Pointer<ffi.Char>, int, int)>();

  int zip_file_set_dostime(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _zip_file_set_dostime(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _zip_file_set_dostimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t, zip_uint16_t,
              zip_uint16_t, zip_flags_t)>>('zip_file_set_dostime');
  late final _zip_file_set_dostime = _zip_file_set_dostimePtr
      .asFunction<int Function(ffi.Pointer<zip_t>, int, int, int, int)>();

  int zip_file_set_encryption(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _zip_file_set_encryption(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_file_set_encryptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t, zip_uint16_t,
              ffi.Pointer<ffi.Char>)>>('zip_file_set_encryption');
  late final _zip_file_set_encryption = _zip_file_set_encryptionPtr.asFunction<
      int Function(ffi.Pointer<zip_t>, int, int, ffi.Pointer<ffi.Char>)>();

  int zip_file_set_external_attributes(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _zip_file_set_external_attributes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _zip_file_set_external_attributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t, zip_flags_t,
              zip_uint8_t, zip_uint32_t)>>('zip_file_set_external_attributes');
  late final _zip_file_set_external_attributes =
      _zip_file_set_external_attributesPtr
          .asFunction<int Function(ffi.Pointer<zip_t>, int, int, int, int)>();

  int zip_file_set_mtime(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _zip_file_set_mtime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_file_set_mtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t, time_t,
              zip_flags_t)>>('zip_file_set_mtime');
  late final _zip_file_set_mtime = _zip_file_set_mtimePtr
      .asFunction<int Function(ffi.Pointer<zip_t>, int, int, int)>();

  ffi.Pointer<ffi.Char> zip_file_strerror(
    ffi.Pointer<zip_file_t> arg0,
  ) {
    return _zip_file_strerror(
      arg0,
    );
  }

  late final _zip_file_strerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<zip_file_t>)>>('zip_file_strerror');
  late final _zip_file_strerror = _zip_file_strerrorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<zip_file_t>)>();

  ffi.Pointer<zip_file_t> zip_fopen(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _zip_fopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_file_t> Function(ffi.Pointer<zip_t>,
              ffi.Pointer<ffi.Char>, zip_flags_t)>>('zip_fopen');
  late final _zip_fopen = _zip_fopenPtr.asFunction<
      ffi.Pointer<zip_file_t> Function(
          ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<zip_file_t> zip_fopen_encrypted(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _zip_fopen_encrypted(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_fopen_encryptedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_file_t> Function(
              ffi.Pointer<zip_t>,
              ffi.Pointer<ffi.Char>,
              zip_flags_t,
              ffi.Pointer<ffi.Char>)>>('zip_fopen_encrypted');
  late final _zip_fopen_encrypted = _zip_fopen_encryptedPtr.asFunction<
      ffi.Pointer<zip_file_t> Function(ffi.Pointer<zip_t>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<zip_file_t> zip_fopen_index(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _zip_fopen_index(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_fopen_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_file_t> Function(ffi.Pointer<zip_t>, zip_uint64_t,
              zip_flags_t)>>('zip_fopen_index');
  late final _zip_fopen_index = _zip_fopen_indexPtr.asFunction<
      ffi.Pointer<zip_file_t> Function(ffi.Pointer<zip_t>, int, int)>();

  ffi.Pointer<zip_file_t> zip_fopen_index_encrypted(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _zip_fopen_index_encrypted(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_fopen_index_encryptedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_file_t> Function(
              ffi.Pointer<zip_t>,
              zip_uint64_t,
              zip_flags_t,
              ffi.Pointer<ffi.Char>)>>('zip_fopen_index_encrypted');
  late final _zip_fopen_index_encrypted =
      _zip_fopen_index_encryptedPtr.asFunction<
          ffi.Pointer<zip_file_t> Function(
              ffi.Pointer<zip_t>, int, int, ffi.Pointer<ffi.Char>)>();

  int zip_fread(
    ffi.Pointer<zip_file_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _zip_fread(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_freadPtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(ffi.Pointer<zip_file_t>, ffi.Pointer<ffi.Void>,
              zip_uint64_t)>>('zip_fread');
  late final _zip_fread = _zip_freadPtr.asFunction<
      int Function(ffi.Pointer<zip_file_t>, ffi.Pointer<ffi.Void>, int)>();

  int zip_fseek(
    ffi.Pointer<zip_file_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _zip_fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_fseekPtr = _lookup<
      ffi.NativeFunction<
          zip_int8_t Function(
              ffi.Pointer<zip_file_t>, zip_int64_t, ffi.Int)>>('zip_fseek');
  late final _zip_fseek = _zip_fseekPtr
      .asFunction<int Function(ffi.Pointer<zip_file_t>, int, int)>();

  int zip_ftell(
    ffi.Pointer<zip_file_t> arg0,
  ) {
    return _zip_ftell(
      arg0,
    );
  }

  late final _zip_ftellPtr = _lookup<
          ffi.NativeFunction<zip_int64_t Function(ffi.Pointer<zip_file_t>)>>(
      'zip_ftell');
  late final _zip_ftell =
      _zip_ftellPtr.asFunction<int Function(ffi.Pointer<zip_file_t>)>();

  ffi.Pointer<ffi.Char> zip_get_archive_comment(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _zip_get_archive_comment(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_get_archive_commentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<zip_t>,
              ffi.Pointer<ffi.Int>, zip_flags_t)>>('zip_get_archive_comment');
  late final _zip_get_archive_comment = _zip_get_archive_commentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<zip_t>, ffi.Pointer<ffi.Int>, int)>();

  int zip_get_archive_flag(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _zip_get_archive_flag(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_get_archive_flagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_flags_t,
              zip_flags_t)>>('zip_get_archive_flag');
  late final _zip_get_archive_flag = _zip_get_archive_flagPtr
      .asFunction<int Function(ffi.Pointer<zip_t>, int, int)>();

  ffi.Pointer<ffi.Char> zip_get_name(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _zip_get_name(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<zip_t>, zip_uint64_t, zip_flags_t)>>('zip_get_name');
  late final _zip_get_name = _zip_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<zip_t>, int, int)>();

  int zip_get_num_entries(
    ffi.Pointer<zip_t> arg0,
    int arg1,
  ) {
    return _zip_get_num_entries(
      arg0,
      arg1,
    );
  }

  late final _zip_get_num_entriesPtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(
              ffi.Pointer<zip_t>, zip_flags_t)>>('zip_get_num_entries');
  late final _zip_get_num_entries = _zip_get_num_entriesPtr
      .asFunction<int Function(ffi.Pointer<zip_t>, int)>();

  ffi.Pointer<ffi.Char> zip_libzip_version() {
    return _zip_libzip_version();
  }

  late final _zip_libzip_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'zip_libzip_version');
  late final _zip_libzip_version =
      _zip_libzip_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int zip_name_locate(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _zip_name_locate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_name_locatePtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>,
              zip_flags_t)>>('zip_name_locate');
  late final _zip_name_locate = _zip_name_locatePtr.asFunction<
      int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<zip_t> zip_open(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _zip_open(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_t> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('zip_open');
  late final _zip_open = _zip_openPtr.asFunction<
      ffi.Pointer<zip_t> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<zip_t> zip_open_from_source(
    ffi.Pointer<zip_source_t> arg0,
    int arg1,
    ffi.Pointer<zip_error_t> arg2,
  ) {
    return _zip_open_from_source(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_open_from_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_t> Function(ffi.Pointer<zip_source_t>, ffi.Int,
              ffi.Pointer<zip_error_t>)>>('zip_open_from_source');
  late final _zip_open_from_source = _zip_open_from_sourcePtr.asFunction<
      ffi.Pointer<zip_t> Function(
          ffi.Pointer<zip_source_t>, int, ffi.Pointer<zip_error_t>)>();

  int zip_register_progress_callback_with_state(
    ffi.Pointer<zip_t> arg0,
    double arg1,
    zip_progress_callback arg2,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg3,
    ffi.Pointer<ffi.Void> arg4,
  ) {
    return _zip_register_progress_callback_with_state(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _zip_register_progress_callback_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zip_t>,
              ffi.Double,
              zip_progress_callback,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.Void>)>>('zip_register_progress_callback_with_state');
  late final _zip_register_progress_callback_with_state =
      _zip_register_progress_callback_with_statePtr.asFunction<
          int Function(
              ffi.Pointer<zip_t>,
              double,
              zip_progress_callback,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int zip_register_cancel_callback_with_state(
    ffi.Pointer<zip_t> arg0,
    zip_cancel_callback arg1,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _zip_register_cancel_callback_with_state(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_register_cancel_callback_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zip_t>,
              zip_cancel_callback,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.Void>)>>('zip_register_cancel_callback_with_state');
  late final _zip_register_cancel_callback_with_state =
      _zip_register_cancel_callback_with_statePtr.asFunction<
          int Function(
              ffi.Pointer<zip_t>,
              zip_cancel_callback,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int zip_set_archive_comment(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _zip_set_archive_comment(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_set_archive_commentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>,
              zip_uint16_t)>>('zip_set_archive_comment');
  late final _zip_set_archive_comment = _zip_set_archive_commentPtr.asFunction<
      int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>, int)>();

  int zip_set_archive_flag(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _zip_set_archive_flag(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_set_archive_flagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_flags_t,
              ffi.Int)>>('zip_set_archive_flag');
  late final _zip_set_archive_flag = _zip_set_archive_flagPtr
      .asFunction<int Function(ffi.Pointer<zip_t>, int, int)>();

  int zip_set_default_password(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _zip_set_default_password(
      arg0,
      arg1,
    );
  }

  late final _zip_set_default_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>,
              ffi.Pointer<ffi.Char>)>>('zip_set_default_password');
  late final _zip_set_default_password = _zip_set_default_passwordPtr
      .asFunction<int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>)>();

  int zip_set_file_compression(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _zip_set_file_compression(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_set_file_compressionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t, zip_int32_t,
              zip_uint32_t)>>('zip_set_file_compression');
  late final _zip_set_file_compression = _zip_set_file_compressionPtr
      .asFunction<int Function(ffi.Pointer<zip_t>, int, int, int)>();

  int zip_source_begin_write(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_begin_write(
      arg0,
    );
  }

  late final _zip_source_begin_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_source_t>)>>(
          'zip_source_begin_write');
  late final _zip_source_begin_write = _zip_source_begin_writePtr
      .asFunction<int Function(ffi.Pointer<zip_source_t>)>();

  int zip_source_begin_write_cloning(
    ffi.Pointer<zip_source_t> arg0,
    int arg1,
  ) {
    return _zip_source_begin_write_cloning(
      arg0,
      arg1,
    );
  }

  late final _zip_source_begin_write_cloningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_source_t>,
              zip_uint64_t)>>('zip_source_begin_write_cloning');
  late final _zip_source_begin_write_cloning =
      _zip_source_begin_write_cloningPtr
          .asFunction<int Function(ffi.Pointer<zip_source_t>, int)>();

  ffi.Pointer<zip_source_t> zip_source_buffer(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    int arg3,
  ) {
    return _zip_source_buffer(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_t>,
              ffi.Pointer<ffi.Void>,
              zip_uint64_t,
              ffi.Int)>>('zip_source_buffer');
  late final _zip_source_buffer = _zip_source_bufferPtr.asFunction<
      ffi.Pointer<zip_source_t> Function(
          ffi.Pointer<zip_t>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<zip_source_t> zip_source_buffer_create(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<zip_error_t> arg3,
  ) {
    return _zip_source_buffer_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_buffer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<ffi.Void>,
              zip_uint64_t,
              ffi.Int,
              ffi.Pointer<zip_error_t>)>>('zip_source_buffer_create');
  late final _zip_source_buffer_create =
      _zip_source_buffer_createPtr.asFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<zip_error_t>)>();

  ffi.Pointer<zip_source_t> zip_source_buffer_fragment(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<zip_buffer_fragment_t> arg1,
    int arg2,
    int arg3,
  ) {
    return _zip_source_buffer_fragment(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_buffer_fragmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_t>,
              ffi.Pointer<zip_buffer_fragment_t>,
              zip_uint64_t,
              ffi.Int)>>('zip_source_buffer_fragment');
  late final _zip_source_buffer_fragment =
      _zip_source_buffer_fragmentPtr.asFunction<
          ffi.Pointer<zip_source_t> Function(ffi.Pointer<zip_t>,
              ffi.Pointer<zip_buffer_fragment_t>, int, int)>();

  ffi.Pointer<zip_source_t> zip_source_buffer_fragment_create(
    ffi.Pointer<zip_buffer_fragment_t> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<zip_error_t> arg3,
  ) {
    return _zip_source_buffer_fragment_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_buffer_fragment_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_buffer_fragment_t>,
              zip_uint64_t,
              ffi.Int,
              ffi.Pointer<zip_error_t>)>>('zip_source_buffer_fragment_create');
  late final _zip_source_buffer_fragment_create =
      _zip_source_buffer_fragment_createPtr.asFunction<
          ffi.Pointer<zip_source_t> Function(ffi.Pointer<zip_buffer_fragment_t>,
              int, int, ffi.Pointer<zip_error_t>)>();

  int zip_source_close(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_close(
      arg0,
    );
  }

  late final _zip_source_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_source_t>)>>(
          'zip_source_close');
  late final _zip_source_close = _zip_source_closePtr
      .asFunction<int Function(ffi.Pointer<zip_source_t>)>();

  int zip_source_commit_write(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_commit_write(
      arg0,
    );
  }

  late final _zip_source_commit_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_source_t>)>>(
          'zip_source_commit_write');
  late final _zip_source_commit_write = _zip_source_commit_writePtr
      .asFunction<int Function(ffi.Pointer<zip_source_t>)>();

  ffi.Pointer<zip_error_t> zip_source_error(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_error(
      arg0,
    );
  }

  late final _zip_source_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_error_t> Function(
              ffi.Pointer<zip_source_t>)>>('zip_source_error');
  late final _zip_source_error = _zip_source_errorPtr.asFunction<
      ffi.Pointer<zip_error_t> Function(ffi.Pointer<zip_source_t>)>();

  ffi.Pointer<zip_source_t> zip_source_file(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _zip_source_file(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_t>,
              ffi.Pointer<ffi.Char>,
              zip_uint64_t,
              zip_int64_t)>>('zip_source_file');
  late final _zip_source_file = _zip_source_filePtr.asFunction<
      ffi.Pointer<zip_source_t> Function(
          ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<zip_source_t> zip_source_file_create(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<zip_error_t> arg3,
  ) {
    return _zip_source_file_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_file_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<ffi.Char>,
              zip_uint64_t,
              zip_int64_t,
              ffi.Pointer<zip_error_t>)>>('zip_source_file_create');
  late final _zip_source_file_create = _zip_source_file_createPtr.asFunction<
      ffi.Pointer<zip_source_t> Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<zip_error_t>)>();

  ffi.Pointer<zip_source_t> zip_source_filep(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<FILE> arg1,
    int arg2,
    int arg3,
  ) {
    return _zip_source_filep(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_filepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_t>,
              ffi.Pointer<FILE>,
              zip_uint64_t,
              zip_int64_t)>>('zip_source_filep');
  late final _zip_source_filep = _zip_source_filepPtr.asFunction<
      ffi.Pointer<zip_source_t> Function(
          ffi.Pointer<zip_t>, ffi.Pointer<FILE>, int, int)>();

  ffi.Pointer<zip_source_t> zip_source_filep_create(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<zip_error_t> arg3,
  ) {
    return _zip_source_filep_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_filep_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<FILE>,
              zip_uint64_t,
              zip_int64_t,
              ffi.Pointer<zip_error_t>)>>('zip_source_filep_create');
  late final _zip_source_filep_create = _zip_source_filep_createPtr.asFunction<
      ffi.Pointer<zip_source_t> Function(
          ffi.Pointer<FILE>, int, int, ffi.Pointer<zip_error_t>)>();

  void zip_source_free(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_free(
      arg0,
    );
  }

  late final _zip_source_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<zip_source_t>)>>(
          'zip_source_free');
  late final _zip_source_free = _zip_source_freePtr
      .asFunction<void Function(ffi.Pointer<zip_source_t>)>();

  ffi.Pointer<zip_source_t> zip_source_function(
    ffi.Pointer<zip_t> arg0,
    zip_source_callback arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _zip_source_function(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_source_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_t>,
              zip_source_callback,
              ffi.Pointer<ffi.Void>)>>('zip_source_function');
  late final _zip_source_function = _zip_source_functionPtr.asFunction<
      ffi.Pointer<zip_source_t> Function(
          ffi.Pointer<zip_t>, zip_source_callback, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<zip_source_t> zip_source_function_create(
    zip_source_callback arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<zip_error_t> arg2,
  ) {
    return _zip_source_function_create(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_source_function_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              zip_source_callback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<zip_error_t>)>>('zip_source_function_create');
  late final _zip_source_function_create =
      _zip_source_function_createPtr.asFunction<
          ffi.Pointer<zip_source_t> Function(zip_source_callback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<zip_error_t>)>();

  int zip_source_get_file_attributes(
    ffi.Pointer<zip_source_t> arg0,
    ffi.Pointer<zip_file_attributes_t> arg1,
  ) {
    return _zip_source_get_file_attributes(
      arg0,
      arg1,
    );
  }

  late final _zip_source_get_file_attributesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<zip_source_t>,
                  ffi.Pointer<zip_file_attributes_t>)>>(
      'zip_source_get_file_attributes');
  late final _zip_source_get_file_attributes =
      _zip_source_get_file_attributesPtr.asFunction<
          int Function(
              ffi.Pointer<zip_source_t>, ffi.Pointer<zip_file_attributes_t>)>();

  int zip_source_is_deleted(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_is_deleted(
      arg0,
    );
  }

  late final _zip_source_is_deletedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_source_t>)>>(
          'zip_source_is_deleted');
  late final _zip_source_is_deleted = _zip_source_is_deletedPtr
      .asFunction<int Function(ffi.Pointer<zip_source_t>)>();

  int zip_source_is_seekable(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_is_seekable(
      arg0,
    );
  }

  late final _zip_source_is_seekablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_source_t>)>>(
          'zip_source_is_seekable');
  late final _zip_source_is_seekable = _zip_source_is_seekablePtr
      .asFunction<int Function(ffi.Pointer<zip_source_t>)>();

  void zip_source_keep(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_keep(
      arg0,
    );
  }

  late final _zip_source_keepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<zip_source_t>)>>(
          'zip_source_keep');
  late final _zip_source_keep = _zip_source_keepPtr
      .asFunction<void Function(ffi.Pointer<zip_source_t>)>();

  ffi.Pointer<zip_source_t> zip_source_layered(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<zip_source_t> arg1,
    zip_source_layered_callback arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _zip_source_layered(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_layeredPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_t>,
              ffi.Pointer<zip_source_t>,
              zip_source_layered_callback,
              ffi.Pointer<ffi.Void>)>>('zip_source_layered');
  late final _zip_source_layered = _zip_source_layeredPtr.asFunction<
      ffi.Pointer<zip_source_t> Function(
          ffi.Pointer<zip_t>,
          ffi.Pointer<zip_source_t>,
          zip_source_layered_callback,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<zip_source_t> zip_source_layered_create(
    ffi.Pointer<zip_source_t> arg0,
    zip_source_layered_callback arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<zip_error_t> arg3,
  ) {
    return _zip_source_layered_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_layered_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_source_t>,
              zip_source_layered_callback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<zip_error_t>)>>('zip_source_layered_create');
  late final _zip_source_layered_create =
      _zip_source_layered_createPtr.asFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_source_t>,
              zip_source_layered_callback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<zip_error_t>)>();

  int zip_source_make_command_bitmap(
    int arg0,
  ) {
    return _zip_source_make_command_bitmap(
      arg0,
    );
  }

  late final _zip_source_make_command_bitmapPtr =
      _lookup<ffi.NativeFunction<zip_int64_t Function(ffi.Int32)>>(
          'zip_source_make_command_bitmap');
  late final _zip_source_make_command_bitmap =
      _zip_source_make_command_bitmapPtr.asFunction<int Function(int)>();

  int zip_source_open(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_open(
      arg0,
    );
  }

  late final _zip_source_openPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_source_t>)>>(
          'zip_source_open');
  late final _zip_source_open =
      _zip_source_openPtr.asFunction<int Function(ffi.Pointer<zip_source_t>)>();

  int zip_source_pass_to_lower_layer(
    ffi.Pointer<zip_source_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    int arg3,
  ) {
    return _zip_source_pass_to_lower_layer(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_pass_to_lower_layerPtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(ffi.Pointer<zip_source_t>, ffi.Pointer<ffi.Void>,
              zip_uint64_t, ffi.Int32)>>('zip_source_pass_to_lower_layer');
  late final _zip_source_pass_to_lower_layer =
      _zip_source_pass_to_lower_layerPtr.asFunction<
          int Function(
              ffi.Pointer<zip_source_t>, ffi.Pointer<ffi.Void>, int, int)>();

  int zip_source_read(
    ffi.Pointer<zip_source_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _zip_source_read(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_source_readPtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(ffi.Pointer<zip_source_t>, ffi.Pointer<ffi.Void>,
              zip_uint64_t)>>('zip_source_read');
  late final _zip_source_read = _zip_source_readPtr.asFunction<
      int Function(ffi.Pointer<zip_source_t>, ffi.Pointer<ffi.Void>, int)>();

  void zip_source_rollback_write(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_rollback_write(
      arg0,
    );
  }

  late final _zip_source_rollback_writePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<zip_source_t>)>>(
          'zip_source_rollback_write');
  late final _zip_source_rollback_write = _zip_source_rollback_writePtr
      .asFunction<void Function(ffi.Pointer<zip_source_t>)>();

  int zip_source_seek(
    ffi.Pointer<zip_source_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _zip_source_seek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_source_seekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_source_t>, zip_int64_t,
              ffi.Int)>>('zip_source_seek');
  late final _zip_source_seek = _zip_source_seekPtr
      .asFunction<int Function(ffi.Pointer<zip_source_t>, int, int)>();

  int zip_source_seek_compute_offset(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<zip_error_t> arg4,
  ) {
    return _zip_source_seek_compute_offset(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _zip_source_seek_compute_offsetPtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(
              zip_uint64_t,
              zip_uint64_t,
              ffi.Pointer<ffi.Void>,
              zip_uint64_t,
              ffi.Pointer<zip_error_t>)>>('zip_source_seek_compute_offset');
  late final _zip_source_seek_compute_offset =
      _zip_source_seek_compute_offsetPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<zip_error_t>)>();

  int zip_source_seek_write(
    ffi.Pointer<zip_source_t> arg0,
    int arg1,
    int arg2,
  ) {
    return _zip_source_seek_write(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_source_seek_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_source_t>, zip_int64_t,
              ffi.Int)>>('zip_source_seek_write');
  late final _zip_source_seek_write = _zip_source_seek_writePtr
      .asFunction<int Function(ffi.Pointer<zip_source_t>, int, int)>();

  int zip_source_stat(
    ffi.Pointer<zip_source_t> arg0,
    ffi.Pointer<zip_stat_t> arg1,
  ) {
    return _zip_source_stat(
      arg0,
      arg1,
    );
  }

  late final _zip_source_statPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_source_t>,
              ffi.Pointer<zip_stat_t>)>>('zip_source_stat');
  late final _zip_source_stat = _zip_source_statPtr.asFunction<
      int Function(ffi.Pointer<zip_source_t>, ffi.Pointer<zip_stat_t>)>();

  int zip_source_tell(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_tell(
      arg0,
    );
  }

  late final _zip_source_tellPtr = _lookup<
          ffi.NativeFunction<zip_int64_t Function(ffi.Pointer<zip_source_t>)>>(
      'zip_source_tell');
  late final _zip_source_tell =
      _zip_source_tellPtr.asFunction<int Function(ffi.Pointer<zip_source_t>)>();

  int zip_source_tell_write(
    ffi.Pointer<zip_source_t> arg0,
  ) {
    return _zip_source_tell_write(
      arg0,
    );
  }

  late final _zip_source_tell_writePtr = _lookup<
          ffi.NativeFunction<zip_int64_t Function(ffi.Pointer<zip_source_t>)>>(
      'zip_source_tell_write');
  late final _zip_source_tell_write = _zip_source_tell_writePtr
      .asFunction<int Function(ffi.Pointer<zip_source_t>)>();

  ffi.Pointer<zip_source_t> zip_source_window_create(
    ffi.Pointer<zip_source_t> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<zip_error_t> arg3,
  ) {
    return _zip_source_window_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_source_window_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_source_t>,
              zip_uint64_t,
              zip_int64_t,
              ffi.Pointer<zip_error_t>)>>('zip_source_window_create');
  late final _zip_source_window_create =
      _zip_source_window_createPtr.asFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_source_t>, int, int, ffi.Pointer<zip_error_t>)>();

  int zip_source_write(
    ffi.Pointer<zip_source_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _zip_source_write(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zip_source_writePtr = _lookup<
      ffi.NativeFunction<
          zip_int64_t Function(ffi.Pointer<zip_source_t>, ffi.Pointer<ffi.Void>,
              zip_uint64_t)>>('zip_source_write');
  late final _zip_source_write = _zip_source_writePtr.asFunction<
      int Function(ffi.Pointer<zip_source_t>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<zip_source_t> zip_source_zip_file(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<zip_t> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Char> arg6,
  ) {
    return _zip_source_zip_file(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _zip_source_zip_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_t>,
              ffi.Pointer<zip_t>,
              zip_uint64_t,
              zip_flags_t,
              zip_uint64_t,
              zip_int64_t,
              ffi.Pointer<ffi.Char>)>>('zip_source_zip_file');
  late final _zip_source_zip_file = _zip_source_zip_filePtr.asFunction<
      ffi.Pointer<zip_source_t> Function(ffi.Pointer<zip_t>, ffi.Pointer<zip_t>,
          int, int, int, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<zip_source_t> zip_source_zip_file_create(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    ffi.Pointer<zip_error_t> arg6,
  ) {
    return _zip_source_zip_file_create(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _zip_source_zip_file_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<zip_source_t> Function(
              ffi.Pointer<zip_t>,
              zip_uint64_t,
              zip_flags_t,
              zip_uint64_t,
              zip_int64_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<zip_error_t>)>>('zip_source_zip_file_create');
  late final _zip_source_zip_file_create =
      _zip_source_zip_file_createPtr.asFunction<
          ffi.Pointer<zip_source_t> Function(ffi.Pointer<zip_t>, int, int, int,
              int, ffi.Pointer<ffi.Char>, ffi.Pointer<zip_error_t>)>();

  int zip_stat1(
    ffi.Pointer<zip_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<zip_stat_t> arg3,
  ) {
    return _zip_stat1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_stat1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>,
              zip_flags_t, ffi.Pointer<zip_stat_t>)>>('zip_stat');
  late final _zip_stat1 = _zip_stat1Ptr.asFunction<
      int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<zip_stat_t>)>();

  int zip_stat_index(
    ffi.Pointer<zip_t> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<zip_stat_t> arg3,
  ) {
    return _zip_stat_index(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _zip_stat_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t, zip_flags_t,
              ffi.Pointer<zip_stat_t>)>>('zip_stat_index');
  late final _zip_stat_index = _zip_stat_indexPtr.asFunction<
      int Function(ffi.Pointer<zip_t>, int, int, ffi.Pointer<zip_stat_t>)>();

  void zip_stat_init(
    ffi.Pointer<zip_stat_t> arg0,
  ) {
    return _zip_stat_init(
      arg0,
    );
  }

  late final _zip_stat_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<zip_stat_t>)>>(
          'zip_stat_init');
  late final _zip_stat_init =
      _zip_stat_initPtr.asFunction<void Function(ffi.Pointer<zip_stat_t>)>();

  ffi.Pointer<ffi.Char> zip_strerror(
    ffi.Pointer<zip_t> arg0,
  ) {
    return _zip_strerror(
      arg0,
    );
  }

  late final _zip_strerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<zip_t>)>>('zip_strerror');
  late final _zip_strerror = _zip_strerrorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<zip_t>)>();

  int zip_unchange(
    ffi.Pointer<zip_t> arg0,
    int arg1,
  ) {
    return _zip_unchange(
      arg0,
      arg1,
    );
  }

  late final _zip_unchangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zip_t>, zip_uint64_t)>>('zip_unchange');
  late final _zip_unchange =
      _zip_unchangePtr.asFunction<int Function(ffi.Pointer<zip_t>, int)>();

  int zip_unchange_all(
    ffi.Pointer<zip_t> arg0,
  ) {
    return _zip_unchange_all(
      arg0,
    );
  }

  late final _zip_unchange_allPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_t>)>>(
          'zip_unchange_all');
  late final _zip_unchange_all =
      _zip_unchange_allPtr.asFunction<int Function(ffi.Pointer<zip_t>)>();

  int zip_unchange_archive(
    ffi.Pointer<zip_t> arg0,
  ) {
    return _zip_unchange_archive(
      arg0,
    );
  }

  late final _zip_unchange_archivePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zip_t>)>>(
          'zip_unchange_archive');
  late final _zip_unchange_archive =
      _zip_unchange_archivePtr.asFunction<int Function(ffi.Pointer<zip_t>)>();

  int zip_compression_method_supported(
    int method,
    int compress,
  ) {
    return _zip_compression_method_supported(
      method,
      compress,
    );
  }

  late final _zip_compression_method_supportedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(zip_int32_t, ffi.Int)>>(
          'zip_compression_method_supported');
  late final _zip_compression_method_supported =
      _zip_compression_method_supportedPtr.asFunction<int Function(int, int)>();

  int zip_encryption_method_supported(
    int method,
    int encode,
  ) {
    return _zip_encryption_method_supported(
      method,
      encode,
    );
  }

  late final _zip_encryption_method_supportedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(zip_uint16_t, ffi.Int)>>(
          'zip_encryption_method_supported');
  late final _zip_encryption_method_supported =
      _zip_encryption_method_supportedPtr.asFunction<int Function(int, int)>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class imaxdiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

typedef intmax_t = __intmax_t;
typedef __intmax_t = ffi.Long;
typedef uintmax_t = __uintmax_t;
typedef __uintmax_t = ffi.UnsignedLong;
typedef __gwchar_t = ffi.Int;

final class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion1 __value;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

final class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off_t = ffi.Long;

final class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off64_t = ffi.Long;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  external ffi.Pointer<ffi.Pointer<_IO_FILE>> _prevchain;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

final class _IO_cookie_io_functions_t extends ffi.Struct {
  external ffi.Pointer<cookie_read_function_t> read;

  external ffi.Pointer<cookie_write_function_t> write;

  external ffi.Pointer<cookie_seek_function_t> seek;

  external ffi.Pointer<cookie_close_function_t> close;
}

typedef cookie_read_function_t = ffi.NativeFunction<
    __ssize_t Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Int __nbytes)>;
typedef __ssize_t = ffi.Long;
typedef cookie_write_function_t = ffi.NativeFunction<
    __ssize_t Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Int __nbytes)>;
typedef cookie_seek_function_t = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<__off64_t> __pos, ffi.Int __w)>;
typedef cookie_close_function_t
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> __cookie)>;
typedef FILE = _IO_FILE;
typedef cookie_io_functions_t = _IO_cookie_io_functions_t;
typedef fpos_t = __fpos_t;
typedef __fpos_t = _G_fpos_t;

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef __suseconds_t = ffi.Long;

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

final class sigevent extends ffi.Opaque {}

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

typedef clock_t = __clock_t;
typedef __clock_t = ffi.Long;
typedef time_t = __time_t;
typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;
typedef clockid_t = __clockid_t;
typedef __clockid_t = ffi.Int;
typedef pid_t = __pid_t;
typedef __pid_t = ffi.Int;
typedef timer_t = __timer_t;
typedef __timer_t = ffi.Pointer<ffi.Void>;

abstract class zip_source_cmd {
  static const int ZIP_SOURCE_OPEN = 0;
  static const int ZIP_SOURCE_READ = 1;
  static const int ZIP_SOURCE_CLOSE = 2;
  static const int ZIP_SOURCE_STAT = 3;
  static const int ZIP_SOURCE_ERROR = 4;
  static const int ZIP_SOURCE_FREE = 5;
  static const int ZIP_SOURCE_SEEK = 6;
  static const int ZIP_SOURCE_TELL = 7;
  static const int ZIP_SOURCE_BEGIN_WRITE = 8;
  static const int ZIP_SOURCE_COMMIT_WRITE = 9;
  static const int ZIP_SOURCE_ROLLBACK_WRITE = 10;
  static const int ZIP_SOURCE_WRITE = 11;
  static const int ZIP_SOURCE_SEEK_WRITE = 12;
  static const int ZIP_SOURCE_TELL_WRITE = 13;
  static const int ZIP_SOURCE_SUPPORTS = 14;
  static const int ZIP_SOURCE_REMOVE = 15;
  static const int ZIP_SOURCE_RESERVED_1 = 16;
  static const int ZIP_SOURCE_BEGIN_WRITE_CLONING = 17;
  static const int ZIP_SOURCE_ACCEPT_EMPTY = 18;
  static const int ZIP_SOURCE_GET_FILE_ATTRIBUTES = 19;
  static const int ZIP_SOURCE_SUPPORTS_REOPEN = 20;
}

final class zip_source_args_seek extends ffi.Struct {
  @zip_int64_t()
  external int offset;

  @ffi.Int()
  external int whence;
}

typedef zip_int64_t = ffi.Int64;

final class zip_error extends ffi.Struct {
  @ffi.Int()
  external int zip_err;

  @ffi.Int()
  external int sys_err;

  external ffi.Pointer<ffi.Char> str;
}

final class zip_stat extends ffi.Struct {
  @zip_uint64_t()
  external int valid;

  external ffi.Pointer<ffi.Char> name;

  @zip_uint64_t()
  external int index;

  @zip_uint64_t()
  external int size;

  @zip_uint64_t()
  external int comp_size;

  @time_t()
  external int mtime;

  @zip_uint32_t()
  external int crc;

  @zip_uint16_t()
  external int comp_method;

  @zip_uint16_t()
  external int encryption_method;

  @zip_uint32_t()
  external int flags;
}

typedef zip_uint64_t = ffi.Uint64;
typedef zip_uint32_t = ffi.Uint32;
typedef zip_uint16_t = ffi.Uint16;

final class zip_buffer_fragment extends ffi.Struct {
  external ffi.Pointer<zip_uint8_t> data;

  @zip_uint64_t()
  external int length;
}

typedef zip_uint8_t = ffi.Uint8;

final class zip_file_attributes extends ffi.Struct {
  @zip_uint64_t()
  external int valid;

  @zip_uint8_t()
  external int version;

  @zip_uint8_t()
  external int host_system;

  @zip_uint8_t()
  external int ascii;

  @zip_uint8_t()
  external int version_needed;

  @zip_uint32_t()
  external int external_file_attributes;

  @zip_uint16_t()
  external int general_purpose_bit_flags;

  @zip_uint16_t()
  external int general_purpose_bit_mask;
}

final class zip extends ffi.Opaque {}

final class zip_file extends ffi.Opaque {}

final class zip_source extends ffi.Opaque {}

typedef zip_t = zip;
typedef zip_progress_callback_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>;
typedef zip_source_t = zip_source;
typedef zip_file_t = zip_file;
typedef zip_flags_t = zip_uint32_t;
typedef zip_error_t = zip_error;
typedef zip_file_attributes_t = zip_file_attributes;
typedef zip_int16_t = ffi.Int16;
typedef zip_int8_t = ffi.Int8;
typedef zip_progress_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<zip_t>, ffi.Double, ffi.Pointer<ffi.Void>)>>;
typedef zip_cancel_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<zip_t>, ffi.Pointer<ffi.Void>)>>;
typedef zip_int32_t = ffi.Int32;
typedef zip_buffer_fragment_t = zip_buffer_fragment;
typedef zip_source_callback = ffi.Pointer<
    ffi.NativeFunction<
        zip_int64_t Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            zip_uint64_t, ffi.Int32)>>;
typedef zip_source_layered_callback = ffi.Pointer<
    ffi.NativeFunction<
        zip_int64_t Function(ffi.Pointer<zip_source_t>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>, zip_uint64_t, ffi.Int32)>>;
typedef zip_stat_t = zip_stat;

const String LIBZIP_VERSION = '1.10.1';

const int LIBZIP_VERSION_MAJOR = 1;

const int LIBZIP_VERSION_MINOR = 10;

const int LIBZIP_VERSION_MICRO = 1;

const int __STDC_FORMAT_MACROS = 1;

const int _INTTYPES_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC23 = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_TIME_BITS64 = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C23_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 40;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _STDINT_H = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int ____gwchar_t_defined = 1;

const String __PRI64_PREFIX = 'l';

const String __PRIPTR_PREFIX = 'l';

const String PRId8 = 'd';

const String PRId16 = 'd';

const String PRId32 = 'd';

const String PRId64 = 'ld';

const String PRIdLEAST8 = 'd';

const String PRIdLEAST16 = 'd';

const String PRIdLEAST32 = 'd';

const String PRIdLEAST64 = 'ld';

const String PRIdFAST8 = 'd';

const String PRIdFAST16 = 'ld';

const String PRIdFAST32 = 'ld';

const String PRIdFAST64 = 'ld';

const String PRIi8 = 'i';

const String PRIi16 = 'i';

const String PRIi32 = 'i';

const String PRIi64 = 'li';

const String PRIiLEAST8 = 'i';

const String PRIiLEAST16 = 'i';

const String PRIiLEAST32 = 'i';

const String PRIiLEAST64 = 'li';

const String PRIiFAST8 = 'i';

const String PRIiFAST16 = 'li';

const String PRIiFAST32 = 'li';

const String PRIiFAST64 = 'li';

const String PRIo8 = 'o';

const String PRIo16 = 'o';

const String PRIo32 = 'o';

const String PRIo64 = 'lo';

const String PRIoLEAST8 = 'o';

const String PRIoLEAST16 = 'o';

const String PRIoLEAST32 = 'o';

const String PRIoLEAST64 = 'lo';

const String PRIoFAST8 = 'o';

const String PRIoFAST16 = 'lo';

const String PRIoFAST32 = 'lo';

const String PRIoFAST64 = 'lo';

const String PRIu8 = 'u';

const String PRIu16 = 'u';

const String PRIu32 = 'u';

const String PRIu64 = 'lu';

const String PRIuLEAST8 = 'u';

const String PRIuLEAST16 = 'u';

const String PRIuLEAST32 = 'u';

const String PRIuLEAST64 = 'lu';

const String PRIuFAST8 = 'u';

const String PRIuFAST16 = 'lu';

const String PRIuFAST32 = 'lu';

const String PRIuFAST64 = 'lu';

const String PRIx8 = 'x';

const String PRIx16 = 'x';

const String PRIx32 = 'x';

const String PRIx64 = 'lx';

const String PRIxLEAST8 = 'x';

const String PRIxLEAST16 = 'x';

const String PRIxLEAST32 = 'x';

const String PRIxLEAST64 = 'lx';

const String PRIxFAST8 = 'x';

const String PRIxFAST16 = 'lx';

const String PRIxFAST32 = 'lx';

const String PRIxFAST64 = 'lx';

const String PRIX8 = 'X';

const String PRIX16 = 'X';

const String PRIX32 = 'X';

const String PRIX64 = 'lX';

const String PRIXLEAST8 = 'X';

const String PRIXLEAST16 = 'X';

const String PRIXLEAST32 = 'X';

const String PRIXLEAST64 = 'lX';

const String PRIXFAST8 = 'X';

const String PRIXFAST16 = 'lX';

const String PRIXFAST32 = 'lX';

const String PRIXFAST64 = 'lX';

const String PRIdMAX = 'ld';

const String PRIiMAX = 'li';

const String PRIoMAX = 'lo';

const String PRIuMAX = 'lu';

const String PRIxMAX = 'lx';

const String PRIXMAX = 'lX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String SCNd8 = 'hhd';

const String SCNd16 = 'hd';

const String SCNd32 = 'd';

const String SCNd64 = 'ld';

const String SCNdLEAST8 = 'hhd';

const String SCNdLEAST16 = 'hd';

const String SCNdLEAST32 = 'd';

const String SCNdLEAST64 = 'ld';

const String SCNdFAST8 = 'hhd';

const String SCNdFAST16 = 'ld';

const String SCNdFAST32 = 'ld';

const String SCNdFAST64 = 'ld';

const String SCNi8 = 'hhi';

const String SCNi16 = 'hi';

const String SCNi32 = 'i';

const String SCNi64 = 'li';

const String SCNiLEAST8 = 'hhi';

const String SCNiLEAST16 = 'hi';

const String SCNiLEAST32 = 'i';

const String SCNiLEAST64 = 'li';

const String SCNiFAST8 = 'hhi';

const String SCNiFAST16 = 'li';

const String SCNiFAST32 = 'li';

const String SCNiFAST64 = 'li';

const String SCNu8 = 'hhu';

const String SCNu16 = 'hu';

const String SCNu32 = 'u';

const String SCNu64 = 'lu';

const String SCNuLEAST8 = 'hhu';

const String SCNuLEAST16 = 'hu';

const String SCNuLEAST32 = 'u';

const String SCNuLEAST64 = 'lu';

const String SCNuFAST8 = 'hhu';

const String SCNuFAST16 = 'lu';

const String SCNuFAST32 = 'lu';

const String SCNuFAST64 = 'lu';

const String SCNo8 = 'hho';

const String SCNo16 = 'ho';

const String SCNo32 = 'o';

const String SCNo64 = 'lo';

const String SCNoLEAST8 = 'hho';

const String SCNoLEAST16 = 'ho';

const String SCNoLEAST32 = 'o';

const String SCNoLEAST64 = 'lo';

const String SCNoFAST8 = 'hho';

const String SCNoFAST16 = 'lo';

const String SCNoFAST32 = 'lo';

const String SCNoFAST64 = 'lo';

const String SCNx8 = 'hhx';

const String SCNx16 = 'hx';

const String SCNx32 = 'x';

const String SCNx64 = 'lx';

const String SCNxLEAST8 = 'hhx';

const String SCNxLEAST16 = 'hx';

const String SCNxLEAST32 = 'x';

const String SCNxLEAST64 = 'lx';

const String SCNxFAST8 = 'hhx';

const String SCNxFAST16 = 'lx';

const String SCNxFAST32 = 'lx';

const String SCNxFAST64 = 'lx';

const String SCNdMAX = 'ld';

const String SCNiMAX = 'li';

const String SCNoMAX = 'lo';

const String SCNuMAX = 'lu';

const String SCNxMAX = 'lx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const int ZIP_INT8_MIN = -128;

const int ZIP_INT8_MAX = 127;

const int ZIP_UINT8_MAX = 255;

const int ZIP_INT16_MIN = -32768;

const int ZIP_INT16_MAX = 32767;

const int ZIP_UINT16_MAX = 65535;

const int ZIP_INT32_MIN = -2147483648;

const int ZIP_INT32_MAX = 2147483647;

const int ZIP_UINT32_MAX = 4294967295;

const int ZIP_INT64_MIN = -9223372036854775808;

const int ZIP_INT64_MAX = 9223372036854775807;

const int ZIP_UINT64_MAX = -1;

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int __cookie_io_functions_t_defined = 1;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int _BITS_STDIO_LIM_H = 1;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int TIME_UTC = 1;

const int ZIP_CREATE = 1;

const int ZIP_EXCL = 2;

const int ZIP_CHECKCONS = 4;

const int ZIP_TRUNCATE = 8;

const int ZIP_RDONLY = 16;

const int ZIP_FL_NOCASE = 1;

const int ZIP_FL_NODIR = 2;

const int ZIP_FL_COMPRESSED = 4;

const int ZIP_FL_UNCHANGED = 8;

const int ZIP_FL_ENCRYPTED = 32;

const int ZIP_FL_ENC_GUESS = 0;

const int ZIP_FL_ENC_RAW = 64;

const int ZIP_FL_ENC_STRICT = 128;

const int ZIP_FL_LOCAL = 256;

const int ZIP_FL_CENTRAL = 512;

const int ZIP_FL_ENC_UTF_8 = 2048;

const int ZIP_FL_ENC_CP437 = 4096;

const int ZIP_FL_OVERWRITE = 8192;

const int ZIP_AFL_RDONLY = 2;

const int ZIP_AFL_IS_TORRENTZIP = 4;

const int ZIP_AFL_WANT_TORRENTZIP = 8;

const int ZIP_AFL_CREATE_OR_KEEP_FILE_FOR_EMPTY_ARCHIVE = 16;

const int ZIP_EXTRA_FIELD_ALL = 65535;

const int ZIP_EXTRA_FIELD_NEW = 65535;

const int ZIP_LENGTH_TO_END = 0;

const int ZIP_LENGTH_UNCHECKED = -2;

const int ZIP_ER_OK = 0;

const int ZIP_ER_MULTIDISK = 1;

const int ZIP_ER_RENAME = 2;

const int ZIP_ER_CLOSE = 3;

const int ZIP_ER_SEEK = 4;

const int ZIP_ER_READ = 5;

const int ZIP_ER_WRITE = 6;

const int ZIP_ER_CRC = 7;

const int ZIP_ER_ZIPCLOSED = 8;

const int ZIP_ER_NOENT = 9;

const int ZIP_ER_EXISTS = 10;

const int ZIP_ER_OPEN = 11;

const int ZIP_ER_TMPOPEN = 12;

const int ZIP_ER_ZLIB = 13;

const int ZIP_ER_MEMORY = 14;

const int ZIP_ER_CHANGED = 15;

const int ZIP_ER_COMPNOTSUPP = 16;

const int ZIP_ER_EOF = 17;

const int ZIP_ER_INVAL = 18;

const int ZIP_ER_NOZIP = 19;

const int ZIP_ER_INTERNAL = 20;

const int ZIP_ER_INCONS = 21;

const int ZIP_ER_REMOVE = 22;

const int ZIP_ER_DELETED = 23;

const int ZIP_ER_ENCRNOTSUPP = 24;

const int ZIP_ER_RDONLY = 25;

const int ZIP_ER_NOPASSWD = 26;

const int ZIP_ER_WRONGPASSWD = 27;

const int ZIP_ER_OPNOTSUPP = 28;

const int ZIP_ER_INUSE = 29;

const int ZIP_ER_TELL = 30;

const int ZIP_ER_COMPRESSED_DATA = 31;

const int ZIP_ER_CANCELLED = 32;

const int ZIP_ER_DATA_LENGTH = 33;

const int ZIP_ER_NOT_ALLOWED = 34;

const int ZIP_ET_NONE = 0;

const int ZIP_ET_SYS = 1;

const int ZIP_ET_ZLIB = 2;

const int ZIP_ET_LIBZIP = 3;

const int ZIP_CM_DEFAULT = -1;

const int ZIP_CM_STORE = 0;

const int ZIP_CM_SHRINK = 1;

const int ZIP_CM_REDUCE_1 = 2;

const int ZIP_CM_REDUCE_2 = 3;

const int ZIP_CM_REDUCE_3 = 4;

const int ZIP_CM_REDUCE_4 = 5;

const int ZIP_CM_IMPLODE = 6;

const int ZIP_CM_DEFLATE = 8;

const int ZIP_CM_DEFLATE64 = 9;

const int ZIP_CM_PKWARE_IMPLODE = 10;

const int ZIP_CM_BZIP2 = 12;

const int ZIP_CM_LZMA = 14;

const int ZIP_CM_TERSE = 18;

const int ZIP_CM_LZ77 = 19;

const int ZIP_CM_LZMA2 = 33;

const int ZIP_CM_ZSTD = 93;

const int ZIP_CM_XZ = 95;

const int ZIP_CM_JPEG = 96;

const int ZIP_CM_WAVPACK = 97;

const int ZIP_CM_PPMD = 98;

const int ZIP_EM_NONE = 0;

const int ZIP_EM_TRAD_PKWARE = 1;

const int ZIP_EM_AES_128 = 257;

const int ZIP_EM_AES_192 = 258;

const int ZIP_EM_AES_256 = 259;

const int ZIP_EM_UNKNOWN = 65535;

const int ZIP_OPSYS_DOS = 0;

const int ZIP_OPSYS_AMIGA = 1;

const int ZIP_OPSYS_OPENVMS = 2;

const int ZIP_OPSYS_UNIX = 3;

const int ZIP_OPSYS_VM_CMS = 4;

const int ZIP_OPSYS_ATARI_ST = 5;

const int ZIP_OPSYS_OS_2 = 6;

const int ZIP_OPSYS_MACINTOSH = 7;

const int ZIP_OPSYS_Z_SYSTEM = 8;

const int ZIP_OPSYS_CPM = 9;

const int ZIP_OPSYS_WINDOWS_NTFS = 10;

const int ZIP_OPSYS_MVS = 11;

const int ZIP_OPSYS_VSE = 12;

const int ZIP_OPSYS_ACORN_RISC = 13;

const int ZIP_OPSYS_VFAT = 14;

const int ZIP_OPSYS_ALTERNATE_MVS = 15;

const int ZIP_OPSYS_BEOS = 16;

const int ZIP_OPSYS_TANDEM = 17;

const int ZIP_OPSYS_OS_400 = 18;

const int ZIP_OPSYS_OS_X = 19;

const int ZIP_OPSYS_DEFAULT = 3;

const int ZIP_SOURCE_SUPPORTS_READABLE = 63;

const int ZIP_SOURCE_SUPPORTS_SEEKABLE = 16639;

const int ZIP_SOURCE_SUPPORTS_WRITABLE = 65535;

const int ZIP_STAT_NAME = 1;

const int ZIP_STAT_INDEX = 2;

const int ZIP_STAT_SIZE = 4;

const int ZIP_STAT_COMP_SIZE = 8;

const int ZIP_STAT_MTIME = 16;

const int ZIP_STAT_CRC = 32;

const int ZIP_STAT_COMP_METHOD = 64;

const int ZIP_STAT_ENCRYPTION_METHOD = 128;

const int ZIP_STAT_FLAGS = 256;

const int ZIP_FILE_ATTRIBUTES_HOST_SYSTEM = 1;

const int ZIP_FILE_ATTRIBUTES_ASCII = 2;

const int ZIP_FILE_ATTRIBUTES_VERSION_NEEDED = 4;

const int ZIP_FILE_ATTRIBUTES_EXTERNAL_FILE_ATTRIBUTES = 8;

const int ZIP_FILE_ATTRIBUTES_GENERAL_PURPOSE_BIT_FLAGS = 16;

const int ZIP_FL_RECOMPRESS = 16;
